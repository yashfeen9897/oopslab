import java.util.Random;
import java.util.Scanner;


class GenArray extends Thread{
    int[] numbers;
    public GenArray(int size) {
        numbers = new int[size];
    }
    public void run() {
        Random random = new Random();
        for (int i = 0; i < numbers.length; i ++) {
            numbers[i] = random.nextInt();
            if (numbers[i] < 0){
                numbers[i] = numbers[i] * -1;
            }
            numbers[i] = numbers[i] / 1000;
        }
    }
    public int[] getArray(){
        return numbers;
    }
}

class SortArray extends Thread {
    int[] numbers;
    public SortArray(int[] numbers) {
        this.numbers = numbers;
    }
    public void run() {
        int n = numbers.length;
        int temp;
        for (int i = 0; i < n-1; i++) {
            for (int j = i+1; j < n; j++) {
                if (numbers[j] < numbers[i]) {
                    temp = numbers[j];
                    numbers[j] = numbers[i];
                    numbers[i] = temp;
                }
            }
        }
    }
    public int[] getSortedArray() {
        return numbers;
    }
}

class SearchNumber extends Thread {
    int[] numbers;
    int num;
    public SearchNumber(int[] numbers, int num) {
        this.numbers = numbers;
        this.num = num;
    }
    public void run() {
        for (int i = 0; i < numbers.length; i++) {
            if (numbers[i] == num) {
                System.out.println("Number found in the array");
                return;
            }
        }
        System.out.println("Number not found");
    }
}
public class Threading {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the size of array");
        int size = scanner.nextInt();
        GenArray genArray = new GenArray(size);
        genArray.start();
        Thread.sleep(1000);

        int[] generatedArray = genArray.getArray();

        for (int i = 0; i< generatedArray.length; i++) {
            System.out.println(generatedArray[i]);
        }

        SortArray sortArray = new SortArray(generatedArray);
        sortArray.start();

        Thread.sleep(1000);

        generatedArray = sortArray.getSortedArray();
        System.out.println("Sorted Array is:");
        for (int i = 0; i < generatedArray.length; i ++) {
            System.out.println(generatedArray[i]);
        }

        System.out.println("Enter the number to be searched");
        int num = scanner.nextInt();
        SearchNumber searchNumber = new SearchNumber(generatedArray, num);
        searchNumber.start();
    }
}






// CPP program to demonstrate 
// Overloading new and delete operator 
// for a specific class
#include<iostream>
#include<stdlib.h>
 
using namespace std;
class student
{
    string name;
    int age;
public:
    student()
    {
        cout<< "Constructor is called\n" ; 
    }
    student(string name, int age)
    {
        this->name = name;
        this->age = age;
    }
    void display()
    {
        cout<< "Name:" << name << endl;
        cout<< "Age:" << age << endl;
    }
    void * operator new(size_t size)
    {
        cout<< "Overloading new operator with size: " << size << endl;
        void * p = ::new student(); 
        //void * p = malloc(size); will also work fine
     
        return p;
    }
 
    void operator delete(void * p)
    {
        cout<< "Overloading delete operator " << endl;
        free(p);
    }
};
 
int main()
{
    student * p = new student("Yash", 24);
 
    p->display();
    delete p;
}





// Subscript opeartor Overloading operators for Array class
#include<iostream>
#include<cstdlib>
 
using namespace std;
 
// A class to represent an integer array
class Array
{
private:
    int *ptr;
    int size;
public:
    Array(int *, int);
 
    // Overloading [] operator to access elements in array style
    int &operator[] (int);
 
    // Utility function to print contents
    void print() const;
};
 
 
// Implementation of [] operator.  This function must return a
// refernce as array element can be put on left side
int &Array::operator[](int index)
{
    if (index >= size)
    {
        cout << "Array index out of bound, exiting";
        exit(0);
    }
    return ptr[index];
}
 
// constructor for array class
Array::Array(int *p = NULL, int s = 0)
{
    size = s;
    ptr = NULL;
    if (s != 0)
    {
        ptr = new int[s];
        for (int i = 0; i < s; i++)
            ptr[i] = p[i];
    }
}
 
void Array::print() const
{
    for(int i = 0; i < size; i++)
        cout<<ptr[i]<<" ";
    cout<<endl;
}
 
// Driver program to test above methods
int main()
{
    int a[] = {1, 2, 4, 5};
    Array arr1(a, 4);
    arr1[2] = 6;
    arr1.print();
    arr1[8] = 6;
    return 0;
}


/*PROGRAM FROM CLASS */

Q1.Define a class ‘Matrix’ which simulates a two dimensional array of integers. The class should have:
  i) . Two private integers representing order of matrix.
 ii) . A private pointer to array that holds the data value.
iii) . A public one argument constructor to define a square matrix.
iv) . A public two argument constructor to define a rectangular 	matrix.
  v) . Public constructor to copy contents from matrix object to 	current instance
 vi) . A private function to input order of matrix.[called by (vii)]
vii) . Public instance function to input data in matrix.
viii). Public instance function to print matrix on screen.
 ix) . Public instance function to print transpose of matrix on 	screen.
x)   . Public instance function to return transpose of matrix.
xi) . Public non-instance function that returns sum of two matrices.
xii). Public non-instance function that returns difference of two 	matrices.
xiii).Public instance function to return matrix multiplied by scalar 	K. K is received as argument in this function.
xiv). Public non instance function returns product of two matrices.
xv). Destructor that deletes the dynamically allocated memory to 	the array.

Sol :
#include <iostream>
#include <cstdlib>
using namespace std;

class Matrix
{
public:
	Matrix(); //Default constructor
	Matrix(int m, int n); //Main constructor
	void setVal(int m, int n); //Method to set the val of [i,j]th-entry
	void printMatrix(); //Method to display the matrix
	~Matrix(); //Destructor

private:
	int m, n;
	int **p;

	//allocate the array
	void allocArray()
	{
		p = new int*[m];
		for(int i = 0; i < m; i++)
		{
			p[i] = new int[n];
		}
	}
};

//Default constructor
Matrix::Matrix() : Matrix(1,1) {}

//Main construcor
Matrix::Matrix(int m, int n)
{
	allocArray();
	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			p[i][j] = 0;
		}
	}
}


//destructor
Matrix::~Matrix()
{
	for(int i = 0; i < m; i++)
	{
		delete [] p[i];
	}
	delete [] p;
}

//SetVal function
void Matrix::setVal(int m, int n)
{
	int newVal = 0;
	p[m][n] = newVal;
}

//printMatrix function
void Matrix::printMatrix()
{
	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			cout << p[m][n] << "  " << endl;
		}
	}
}


int main()
{
	int d1 = 4;
	int d2 = 3;

	Matrix object;

	//create 4x3 dynamic 2d array
	int ** matrix = new int*[d1];
	for(int j = 0; j < d1; j++)
	{
		matrix[j] = new int[d2];
	}

	//fill array
	cout << "Enter values " << endl;
	for(int i = 0; i < d1; ++i)
	{
		for(int j = 0; j < d2; ++j)
		{
			cin >> matrix[i][j];
		}
	}

	object.printMatrix();

	return 0;
}


Q2.Define a class ‘Date’ such that following specifications are met:
a). Private integers to represent date, month, year.
b). 3 argument public constructor to initialize the date object. 
c). Perform suitable validations.
d). Public member functions to change value of date, month, year 	components.
e). Public function that prints date as : MONTH_NAME DD, YYYY.
 f).  Public function that returns whether two date objects have same value or not.
Sol  :
#include <iostream>
#include <string>
using namespace std;

class Date
{
private:
	int month, day, year;
public:
	Date( );
	Date(int, int, int);
	~Date( ){ }
	void setDay(int);
	void setMonth(int);
	void setYear(int);
	void showDate1( );
	void showDate2( );
	void showDate3( );
	void compareDate(Date d1, Date d2);

};
Date::Date( )
{
	month = 0, day = 0, year = 0;
}
Date::Date(int Month, int Day, int Year)
{
	month = Month;
	day = Day;
	year = Year;
}
void Date::setDay(int d)
{
	if (d < 1 && d > 31)
		cout << "The day is invalid" << endl;
	else
	day = d;
	
}
void Date::setMonth(int m)
{
	if (m < 1 && m > 12)
		cout << "The month is invalid" << endl;
	else
	month = m;
	
}
void Date::setYear(int y)
{
	if (y < 1950 && y > 2020)
		cout << "The year is invalid" << endl;
	else
		year = y;
}
void Date::showDate1()
{
	cout << month << " /" << day << " /" << year << endl;
}
void Date::showDate2()
{
	string monthName[] = { "January", "February", "March",
		"April", "May", "June", "July",
		"August", "September", "October",
		"November", "December" };
	cout << monthName[month - 1] << "  " << day << "  " << year << endl;
}
void Date::showDate3()
{
	string monthName[] = { "January", "February", "March",
		"April", "May", "June", "July",
		"August", "September", "October",
		"November", "December" };
	cout << day << "  " << monthName[month - 1] << "  " << year << endl;
}

void Date :: compareDate(Date d1, Date d2)
{
	if(d1.day == d2.day && d1.month == d2.month && d1.year == d2.year)
		cout<<"\nThe dates are same..!";
	else
		cout<<"\nThe dates are different";
}

int main()
{
	int Month, Day, Year;
	string monthName[] = { "January", "February", "March",
		"April", "May", "June", "July",
		"August", "September", "October",
		"November", "December" };


	cout << "Please enter a month (between 1 - 12) " << endl;
	cin >> Month;
	
	cout << "Please enter a day (between 1 - 31) " << endl;
	cin >> Day;
	
	cout << "Please enter a year (between 1950 - 2020) " << endl;
	cin >> Year;
		
	
	Date newDate(Month, Day, Year);
	newDate.showDate1();
	newDate.showDate2();
	newDate.showDate3();
	
	Date d1(12,8,14);
	Date d2(12,8,14);
	d1.compareDate(d1,d2);
	
	Date d3(16,10,14);
	Date d4(12,8,14);
	d3.compareDate(d3,d4);
	return 0;
}

OUTPUT : 

 

Q3.Write a program in C++ to add two complex numbers using friend function.
Sol  :
#include <iostream>
using namespace std;

class complex{
	  private:
	  		  float real;
	  		  float imag;
	  public:
	  		 complex( ){ }
	  		 void read( ) 
			{
			 	cout<<"Enter real part  :\t";
			 	cin>>real;
			 	cout<<"Enter imag part  :\t";
			 	cin>>imag;
			}
	      		void show( )
	          		{
			   	cout<<"\nComplex Number is:\t";
			   	cout<<real<<" + "<<imag<<" i"<<endl;
			}
		friend complex operator + (complex c1 , complex c2);
	 };

   complex operator +(complex c1 , complex c2)
   {
   		   complex c;
   		   c.real=c1.real+c2.real;
   		   c.imag=c1.imag+c2.imag;
   		   return c;
   }
   
   
       int main( )
      {
   		complex c1,c2,c3;
   		cout<<"Enter first complex"<<endl;
   		c1.read();
   		cout<<"\nEnter second complex"<<endl;
   		c2.read();
   		c3=c1+c2;
   		c3.show();
   		return 0;
      }

OUTPUT  :
 

Q4.Implement Complex Arithmetic [+, -, *, /, ~, ++(post/pre), --(post/pre))] {Operator Overloading}.

Sol  :
#include<iostream>
#include<conio.h>
using namespace std;
class cmplx{
      int real,img;
      public:
      cmplx(int r=0,int i=0){
                real=r;
                img=i;
     	 }
      cmplx operator +(cmplx c1){
            cmplx temp;
            temp.real=real+c1.real;
            temp.img=img+c1.img;
            return temp;
      }
      cmplx operator -(cmplx c1){
            cmplx temp;
            temp.real=real-c1.real;
            temp.img=img-c1.img;
            return temp;
      }
      cmplx operator *(cmplx c1){
            cmplx temp;
            temp.real=real*c1.real-img*c1.img;
            temp.img=real*c1.img+c1.real*img;
            return temp;
      }
      cmplx operator ++(int){
    	cmplx temp;
    	temp.real = real++;
    	temp.img = img++;
    	return temp;
      }
      cmplx operator ++(){
            cmplx temp;
            temp.real=++real;
            temp.img=++img;
            return *this;
      }
      cmplx operator --(){
            cmplx temp;
            temp.real=real-1;
            temp.img=img-1;
            return temp;
      }
      cmplx operator --(int){
            cmplx temp;
            temp.real=real-1;
            temp.img=img-1;
            return temp;
      }
      void print(){
           cout<<real<<"+"<<img<<+"i"<<"\n";
      }
                           
};
               
int main(){
    cmplx c1(2,3);
    cout<<"c1=";
    c1.print();
    cmplx c2(3,4);
    cout<<"c2=";
    c2.print();
    
    
    cout<<"ADDITION\t";
    cmplx c3=c1+c2;
    cout<<"c3=";
    c3.print();
    
    
    cout<<"SUBTRACTION\t";
    cmplx c4=c1-c2;
    cout<<"c4=";
    c4.print();
    
    cout<<"MULTIPLICATION\t";
    cmplx c5=c1*c2;
    cout<<"c5=";
    c5.print();
    
    cout<<"PREINCREMENT\t";
    cmplx c7=++c1;
    cout<<"c7=";
    c7.print();
    
    cout<<"POSTINCREMENT\t";
    cmplx c6=c1++;
    cout<<"c6=";
    c6.print();
    
    cout<<"POSTDECREMENT\t";
    cmplx c8=c1--;
    cout<<"c8=";
    c8.print();
    
    cout<<"PREDECREMENT\t";
    cmplx c9= --c1;
    cout<<"c9=";
    c9.print();
    getch();
    return 0;
}

OUTPUT  :
 


Q5.Implement a custom string class that supports concatenation [overloaded +] and comparison[overloaded ==] operations.

Sol  :
#include<iostream>
#include<string.h>
using namespace std;

class CString
{
    public:
        char str[20];
    public:
        void get_string()
        {
                cout<<"\n Enter String    :   ";
                cin>>str;
        }
        void display()
        {
                cout<<str;
        }	
        CString operator+(CString x)  //Concatenating String
        {
                CString s;
                strcat(str, x.str);
                strcpy(s.str, str);
                return s;
        }
        int operator==(CString &t);   //Comparing String
};
int CString::operator==(CString &t)  
{
        for(int i=0; str[i]!='_'; i++)
        {
                for(int j=0; t.str[j]!='_'; j++)
                {
                        if(str[i]==t.str[j])
                        {
                                return 0;
                        }
                        else
                        {
                                return 1;
                        }
                }
        }
}
int main()
{
        CString str1, str2, str3;
        int result=0;

        str1.get_string();
        str2.get_string();
        str3=str1+str2;        
        cout<<"\n\n Concatenated String is    :  ";
        str3.display();

        result=str1==str2;  
        if(result==0)
        {
                cout<<"\n\nBoth Strings are Equal";
        }
        else
        {
                cout<<"\n\nBoth Strings are Not Equal";
        }
        return 0;
}




//final wala program
// final
//PersonDemo
 final class PersonDemo
{
    // instance variables - replace the example below with your own
    int id ;
    String name;

    public PersonDemo(int id , String name)
    {
        this.id = id;
        this.name=name;
    }
    public void showdata()
    {
        System.out.println("Person's Name : "+name+"\n"+"Person's id : "+id); 
        
    }


}

//EmployeeDemo


public class EmployeeDemo extends PersonDemo
{
    // instance variables - replace the example below with your own
    float sal;
    public EmployeeDemo(int id,String name , float sal)
    {
        super(id,name);
        this.sal=sal;
    }
    final void showdata()
    {
        super.showdata();
        System.out.println("Employee's salary : "+sal);
    }
}


//ManagerDemo


import java.util.Scanner;
public class ManagerDemo extends EmployeeDemo
{
    // instance variables - replace the example below with your own
    final String desig;

   
    public ManagerDemo(int id , String name , float sal , String desig)
    {
        super(id,name,sal);
        this.desig = desig;
    }

    public void showdata()
    {
        super.showdata();
        System.out.println("Manager's designation : " + desig);
    }
    
}


//Demofinal

import java.util.Scanner;
public class DemoFinal
{
    // instance variables - replace the example below with your own
     public static void main(String args[]){
     
        Scanner s = new Scanner(System.in);
        int id;
        String name , desig;
        float sal;
        System.out.println("ENTER PERSON'S NAME");
        name=s.nextLine();
        System.out.println("ENTER PERSON'S ID");
        id=s.nextInt();
        System.out.println("ENTER EMPLOYEE'S SALARY");
        sal = s.nextFloat();
        s.close();
        Scanner s1 = new Scanner(System.in);
        System.out.println("ENTER MANAGER'S DESIGNATION");
        desig = s1.nextLine();
        ManagerDemo man = new ManagerDemo(id , name , sal ,desig);
        man.showdata();
        
        
        
    }
}





//inheritance using abstract class
//abstract
//person
abstract class PersonAbstract
{
    int id ;
    String name;
    public PersonAbstract(int id , String name){
      this.id=id;
      this.name=name;
    }
    public void showdata()
    {
      System.out.println("Person's Name : " + name + "\n"+"Person's id : " +id);
    }
    abstract void show();
}

//employee


public class EmployeeAbstract extends PersonAbstract
{
    float sal;
    public EmployeeAbstract(int id,String name , float sal)
    {
        super(id,name);
        this.sal=sal;
    }
    public void showdata()
    {
        super.showdata();
        System.out.println("Employee's salary : "+sal);
    }
    
    public void show()
    {
        System.out.println("Inhereted show() from Person to Employee");
    }
}


//manager

import java.util.Scanner;
public class ManagerAbstract extends EmployeeAbstract
{
    // instance variables - replace the example below with your own
    String desig;

   
    public ManagerAbstract(int id , String name , float sal , String desig)
    {
        super(id,name,sal);
        this.desig = desig;
    }

    public void showdata()
    {
        super.showdata();
        System.out.println("Manager's designation : " + desig);
    }
    public void show()
    {
        System.out.println("inherited abstract method void to ManagerAbstract");
    }
    
}


//demo main

import java.util.Scanner;
public class DemoAbstract
{
    // instance variables - replace the example below with your own
     public static void main(String args[]){
     
        Scanner s = new Scanner(System.in);
        int id;
        String name , desig;
        float sal;
        System.out.println("ENTER PERSON'S NAME");
        name=s.nextLine();
        System.out.println("ENTER PERSON'S ID");
        id=s.nextInt();
        System.out.println("ENTER EMPLOYEE'S SALARY");
        sal = s.nextFloat();
        s.close();
        Scanner s1 = new Scanner(System.in);
        System.out.println("ENTER MANAGER'S DESIGNATION");
        desig = s1.nextLine();
        ManagerAbstract man = new ManagerAbstract(id , name , sal ,desig);
        man.showdata();
        man.show();
        
        
        
    }
}








